<?xml version="1.0" encoding="UTF-8" standalone="no"?>

<project name="Watchneighbors" basedir="." default="run">
   <!-- Database properties -->
   <property name="sql.driver" value="org.postgresql.Driver"/>
   <property name="sql.url" value="jdbc:postgresql://localhost/"/>
   <property name="sql.user" value="postgres"/>
   <property name="sql.pass" value="postgres"/>
   <property name="sql.dbname" value="watchneighborsdb"/>

   <!-- Project properties -->
   <property name="classpath.property" value="res" />
   <property name="source.dir" value="src" />
   <property name="output.dir" value="classes" />
   <property name="doc.dir" value="doc" />
   <property name="jar.dir" value="jar" />
   <property name="dist.jar.dir" location="jar/res" />
   <property name="main.server.class"   value="com.uninsubria.watchneighbors.clientserver.WatchneighborsServer"/>
   <property name="main.client.class"   value="com.uninsubria.watchneighbors.gui.GUIMain"/>
   <property name="prj.client.name" value="Watchneighbors" />
   <property name="prj.server.name" value="Watchneighbors server" />
   
   <!-- Set classpath -->
   <path id="build.classpath">
      <fileset dir="${classpath.property}" includes="**/*.jar"/>
	 </path>
   
   <!-- Clean -->
   <target name="clean">
      <delete dir="${output.dir}" />
      <delete dir="${doc.dir}" />
      <delete dir="${jar.dir}" />
   </target>
   
   <!-- Prepare -->
   <target name="prepare" depends="clean">
      <mkdir dir="${output.dir}" />
      <mkdir dir="${doc.dir}" />
      <mkdir dir="${jar.dir}" />
    </target>
    
    <!-- Initialize classpath
    <target name="init" depends="prepare">
		<java classname="${main.server.class}" fork="true">
			<classpath>
				<path refid="build.classpath" />
				<pathelement location="${jar.dir}/${prj.server.name}.jar" />
			</classpath>
		</java>
		
		<java classname="${main.client.class}" fork="true">
			<classpath>
				<path refid="build.classpath" />
				<pathelement location="${jar.dir}/${prj.client.name}.jar" />
			</classpath>
		</java>
	</target>
  -->

    <!-- Compile the project -->
    <target name="compile" depends="prepare">
      	<path id="runtime.path">
       		<fileset dir="${classpath.property}" includes="*.jar" />
      	</path>
     	<javac includeantruntime="false" srcdir="${source.dir}" destdir="${output.dir}" classpathref="build.classpath" />
    </target>

    <!-- Drop database -->
    <target name="dropdb">
      <input message="Do you really want to delete this table (y/n)?" validargs="y,n" addproperty="do.delete" /> 
      <condition property="do.abort"> 
            <equals arg1="n" arg2="${do.delete}"/> 
      </condition> 
      <fail if="do.abort">Build aborted by user.</fail> 
        <sql driver="${sql.driver}" 
             url="${sql.url}" 
             userid="${sql.user}" 
             password="${sql.pass}" 
             print="yes"
             classpathref="build.classpath" 
             autocommit="true">

            DROP database watchneighborsdb;

      </sql>
   </target>

    <!-- Make database -->
   <target name="makedb">

      <sql driver="${sql.driver}" 
           url="${sql.url}" 
           userid="${sql.user}" 
           password="${sql.pass}"
           print="yes" 
           classpathref="build.classpath" 
           autocommit="true">
           
            CREATE database watchneighborsdb;

         </sql>
   </target>

   <!-- Create table   -->
   <target name="createtab">
      <sql driver="${sql.driver}" 
           url="jdbc:postgresql://localhost/watchneighborsdb" 
           userid="${sql.user}" 
           password="${sql.pass}" >
           <classpath>
            <pathelement location="res/postgresql-9.4-1204.jdbc42.jar"/>
           </classpath>   

            CREATE TABLE IF NOT EXISTS Person (
            UserID Varchar(30) PRIMARY KEY,
            Password Varchar(30) NOT NULL,
            Name Varchar(30) NOT NULL,
            Surname Varchar(30) NOT NULL,
            Email Varchar(255) NOT NULL,
            City Varchar(20) NOT NULL,
            Address Varchar(30) NOT NULL,
            Latitude numeric NOT NULL,
            Longitude numeric NOT NULL,
            District Varchar(20) NOT NULL
            );

            CREATE TABLE IF NOT EXISTS Event (
            EventID BIGSERIAL NOT NULL,
            EventDescription Varchar(30) NOT NULL,
            DistrictName Varchar(20) NOT NULL, 
            CityName Varchar(20) NOT NULL,
            WatchIT Boolean NOT NULL,
            EventLat numeric NOT NULL,
            EventLng numeric NOT NULL,
            TimeStampOpen TimeStamp NOT NULL,
            TimeStampClose TimeStamp,
            UserID Varchar(30) NOT NULL REFERENCES Person(UserId) ON DELETE CASCADE,
            UserLat numeric NOT NULL,
            UserLng numeric NOT NULL,
            Status Varchar(30) NOT NULL,
            Outcome Varchar(40),
            Resolventuser Varchar(30) REFERENCES Person(UserID) ON DELETE CASCADE,
            PRIMARY KEY (EventID)
            );

            CREATE VIEW reg_users AS 
              SELECT City, District, UserID, Name, Surname 
              FROM Person;
           
      </sql>
   </target>

   <!-- Generate javadocs for current project into ${doc.dir} -->
  <target name="javadoc">
    <javadoc sourcepath="${source.dir}" destdir="${doc.dir}" classpathref="build.classpath" />
  </target>

  <!-- Copy dependencies 
  <target name="copy-dependencies" depends="compile">
    <copy todir="${dist.jar.dir}">
      <fileset dir="${classpath.property}" includes="**/*.jar" excludes="**/*sources.jar, **/*javadoc.jar" />
    </copy>
  </target>
  -->

  <!-- Generate the jar for the client -->
  <target name="jar_client" depends="compile">
      <jar destfile="${jar.dir}/${prj.client.name}.jar" basedir="${output.dir}">
        <zipgroupfileset dir="${classpath.property}" includes="**/*.jar" />
          <manifest>
              <attribute name="jar_client" value="main"/>
              <attribute name="Main-Class" value="${main.client.class}" />
              <attribute name="Class-Path" value="${output.dir}" />
              
          </manifest>
      </jar>
  </target>

  <!-- Generate the jar for the server -->
  <target name="jar_server" depends="compile">
      <jar destfile="${jar.dir}/${prj.server.name}.jar" basedir="${output.dir}">
        <zipgroupfileset dir="${classpath.property}" includes="**/*.jar" />
          <manifest>
              <attribute name="jar_server" value="main"/>
              <attribute name="Main-Class" value="${main.server.class}" />
              <attribute name="Class-Path" value="${output.dir}" />
              
          </manifest>
      </jar>
  </target>

  <!-- Run client -->
  <target name="run_client" depends="jar_client">
    <java classname="${main.client.class}" fork="true">
      <classpath>
        <path refid="build.classpath" />
        <pathelement location="${jar.dir}/${prj.client.name}.jar" />
      </classpath>
    </java>
      
  </target>
  
  <!-- Run server -->
  <target name="run_server" depends="jar_server">
    <java classname="${main.server.class}" fork="true">
      <classpath>
        <path refid="build.classpath" />
        <pathelement location="${jar.dir}/${prj.server.name}.jar" />
      </classpath>
    </java>

  </target>

  <target  name="run" depends="jar_server, jar_client" description="Execution">
    <parallel>
      <java classname="${main.server.class}" fork="true">
        <classpath>
          <path refid="build.classpath" />
          <pathelement location="${jar.dir}/${prj.server.name}.jar" />
        </classpath>
      </java>
      
      <sleep seconds="3" />
      
      <java classname="${main.client.class}" fork="true">
        <classpath>
          <path refid="build.classpath" />
          <pathelement location="${jar.dir}/${prj.client.name}.jar" />
        </classpath>
      </java>
    </parallel>
  </target>

</project>