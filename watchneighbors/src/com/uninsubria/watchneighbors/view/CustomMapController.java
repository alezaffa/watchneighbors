package com.uninsubria.watchneighbors.view;

import java.awt.Point;
import java.awt.event.MouseEvent;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import org.openstreetmap.gui.jmapviewer.Coordinate;
import org.openstreetmap.gui.jmapviewer.DefaultMapController;
import org.openstreetmap.gui.jmapviewer.JMapViewer;
import org.openstreetmap.gui.jmapviewer.interfaces.MapMarker;

import com.uninsubria.watchneighbors.model.Event;
import com.uninsubria.watchneighbors.model.Geoposition;
import com.uninsubria.watchneighbors.model.User;

/**
 * Manages the map.
 * @author alessandro, christian, silvia, denise
 *
 */
public class CustomMapController extends DefaultMapController {

	private String latitude;
	private String longitude;
	private Double[] latLng;
	
	/**
	 * Constructs a new {@code DefaultMapController}.
	 * @param map The object that represents the map
	 */
	public CustomMapController(JMapViewer map) {
		super(map);
	}
	
	private Double[] onClickGetCoordinates(MouseEvent e) {
		if(e.getClickCount() == 1 && e.getButton() == MouseEvent.BUTTON1) {
			Coordinate markeradd = (Coordinate) map.getPosition(e.getPoint());
			latLng = new Double[] {markeradd.getLat(), markeradd.getLon()};
		}
		return latLng;
	}
	
	/**
	 * Adds an event on the map.
	 * @param e An event generated by the mouse.
	 * @param panelDashboard The panel dashboard where the user can add and close the events.
	 * @param registeredUser An User object.
	 * @return Event A new event.
	 */
	public Event onClickAddEvent(MouseEvent e, PanelDashboard panelDashboard, User registeredUser) {

		latitude = onClickGetCoordinates(e)[0].toString();
		longitude = onClickGetCoordinates(e)[1].toString();
		
		panelDashboard.getLblEventLatitude().setText(latitude.substring(0, 6));
		panelDashboard.getLblEventLongitude().setText(longitude.substring(0, 6));
		
		return new Event(panelDashboard.getLblEventUserID().getText(), 
				new Date(), 
				null,
				registeredUser.getDistrict(), 
				panelDashboard.getComboBoxEventDescription().getSelectedItem().toString(),
				"OPEN",
				Double.parseDouble(latitude), 
				Double.parseDouble(longitude),
				registeredUser.getCity(),
				false,
				registeredUser.getUsrLat(),
				registeredUser.getUsrLng());
		
	}

	/**
	 * Highlight the event into the user interface and set its geoposition.
	 * @param e An event generated by the mouse
	 * @param panelDashboard The panel dashboard where the user can add and close the events.
	 * @return boolean: true if the event is selected, false otherwise
	 */
	public boolean isEventSelected(MouseEvent e, PanelDashboard panelDashboard) {

		boolean isEventSelected = false;
		
    	Point p = e.getPoint();
    	int X = p.x+3;
    	int Y = p.y+3;
    	
    	List<MapMarker> ar = map.getMapMarkerList();
    	Iterator<MapMarker> mapIterator = ar.iterator();
    	
    	int modelListSize = panelDashboard.getJlist().getModel().getSize();
    	
    	while (mapIterator.hasNext()) {

    		MapMarker mapMarker = (MapMarker) mapIterator.next();

    		Point MarkerPosition = map.getMapPosition(mapMarker.getLat(), mapMarker.getLon());
    		if(MarkerPosition != null) {

    			int centerX = MarkerPosition.x;
    			int centerY = MarkerPosition.y;

    			double radCircle  = Math.sqrt( (((centerX-X)*(centerX-X)) + (centerY-Y)*(centerY-Y)));

    			if (radCircle < 8) {
    				
    				for(int j=0; j<modelListSize; j++) {

    					String lat = mapMarker.getLat() + "";
    					String lon = mapMarker.getLon() + "";
    					String latLonPattern = "position " + lat.substring(0, 6) + " - " + lon.substring(0, 6);
    					String eventInPositionJ = panelDashboard.getJlist().getModel().getElementAt(j).toString();
    					
    					if(eventInPositionJ.contains(latLonPattern)) { 
    						panelDashboard.getJlist().setSelectedIndex(j);
    						panelDashboard.getJlist().ensureIndexIsVisible(j);
    						panelDashboard.getLblEventLatitude().setText(lat.substring(0, 6));
    						panelDashboard.getLblEventLongitude().setText(lon.substring(0, 6));
    						isEventSelected = true;
    					}
    				}
    			}
    		}
    	}
		return isEventSelected;
    }
	
	/**
	 * Checks if mouse click is inside the district area.
	 * @param e An event generated by the mouse
	 * @param coordinate Latitude and longitude of the event
	 * @return boolean: true if is inside the district, false otherwise
	 */
	public boolean isMouseClickInsideDistrict(MouseEvent e, Geoposition coordinate) {
		
		boolean isInisdeDistrict = false;
    	
		double x = onClickGetCoordinates(e)[0];
		double y = onClickGetCoordinates(e)[1];
		
		double centerX = coordinate.getLat();
		double centerY = coordinate.getLon();
		
		if (Math.sqrt( (((x-centerX)*(x-centerX)) + (y-centerY)*(y-centerY))) < 0.005) {
			isInisdeDistrict = true;
		}
		return isInisdeDistrict;
	}

}	